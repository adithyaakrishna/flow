Error --------------------------------------------------------------------------------- detect_literal_subtypes.js:17:15

string literal `b` [1] is incompatible with string literal `a` [2]. [incompatible-type]

   detect_literal_subtypes.js:17:15
   17|     if (a === 'b'){ } // error 'b' not compatible with 'a'
                     ^^^ [1]

References:
   detect_literal_subtypes.js:16:18
   16|   function a1<A: 'a'>(a: A): void {
                        ^^^ [2]


Error --------------------------------------------------------------------------------- detect_literal_subtypes.js:21:15

string literal `b` [1] is incompatible with string literal `a` [2]. [incompatible-type]

   detect_literal_subtypes.js:21:15
   21|     if (b === 'b'){ } // error 'b' not compatible with 'a'
                     ^^^ [1]

References:
   detect_literal_subtypes.js:20:18
   20|   function b1<A: 'a', B: A>(b: B): void {
                        ^^^ [2]


Error --------------------------------------------------------------------------------- detect_literal_subtypes.js:39:12

Property `r` is missing in `T` [1]. [prop-missing]

   detect_literal_subtypes.js:39:12
   39|       case 'r': // error
                  ^^^

References:
   detect_literal_subtypes.js:33:29
   33|   function c<X: T>(x: $Keys<X>) {
                                   ^ [1]


Error ------------------------------------------------------------------------------------------------ generics.js:17:16

Cannot assign `d.x` to `s` because number [1] is incompatible with string [2]. [incompatible-type]

   generics.js:17:16
   17| var s:string = d.x;
                      ^^^

References:
   generics.js:15:15
   15| var d = new D<number>();
                     ^^^^^^ [1]
   generics.js:17:7
   17| var s:string = d.x;
             ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ generics.js:25:16

Cannot assign `e.set(...)` to `x` because number [1] is incompatible with string [2]. [incompatible-type]

   generics.js:25:16
   25| var x:string = e.set(0);
                      ^^^^^^^^

References:
   generics.js:24:15
   24| var e = new E<number | void>(); // error: too few arguments to inherited constructor
                     ^^^^^^ [1]
   generics.js:25:7
   25| var x:string = e.set(0);
             ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ generics.js:25:16

Cannot assign `e.set(...)` to `x` because undefined [1] is incompatible with string [2]. [incompatible-type]

   generics.js:25:16
   25| var x:string = e.set(0);
                      ^^^^^^^^

References:
   generics.js:24:24
   24| var e = new E<number | void>(); // error: too few arguments to inherited constructor
                              ^^^^ [1]
   generics.js:25:7
   25| var x:string = e.set(0);
             ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ generics.js:36:41

Cannot assign `h1` to `h2` because string [1] is incompatible with number [2] in type argument `X` [3].
[incompatible-type-arg]

   generics.js:36:41
   36| var h2:F<Array<Array<Array<number>>>> = h1;
                                               ^^

References:
   generics.js:34:22
   34| var h1 = new H<Array<string>>();
                            ^^^^^^ [1]
   generics.js:36:28
   36| var h2:F<Array<Array<Array<number>>>> = h1;
                                  ^^^^^^ [2]
   generics.js:27:9
   27| class F<X> { }
               ^ [3]


Error ------------------------------------------------------------------------------------------------ generics.js:38:11

Cannot apply type because it is not a polymorphic type. [nonpolymorphic-type-app]

   38| var obj : Object<string, string> = {} // error, arity 0
                 ^^^^^^^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------ generics.js:39:11

Cannot apply type because it is not a polymorphic type. [nonpolymorphic-type-app]

   39| var fn1 : Function<string> = function() { return 'foo'; } // error, arity 0
                 ^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------ generics.js:40:11

Cannot apply type because it is not a polymorphic type. [nonpolymorphic-type-app]

   40| var fn2 : function<string> = function() { return 'foo'; } // error, arity 0
                 ^^^^^^^^^^^^^^^^



Found 10 errors
