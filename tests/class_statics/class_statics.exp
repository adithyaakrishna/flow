Error --------------------------------------------------------------------------------- class_static_constructor.js:4:10

Classes may not have static fields named `constructor`.

   4|   static constructor: Object; // error
               ^^^^^^^^^^^


Error ----------------------------------------------------------------------------------- class_static_prototype.js:4:10

Classes may not have static fields named `prototype`.

   4|   static prototype: Object; // error
               ^^^^^^^^^


Error ------------------------------------------------------------------------ declared_class_static_constructor.js:4:10

Classes may not have static fields named `constructor`.

   4|   static constructor: Object; // error
               ^^^^^^^^^^^


Error -------------------------------------------------------------------------- declared_class_static_prototype.js:4:10

Classes may not have static fields named `prototype`.

   4|   static prototype: Object; // error
               ^^^^^^^^^


Error ------------------------------------------------------------------------------------------------------ test.js:7:3

Cannot assign function to `A.qux` because property `qux` is missing in statics of `A` [1]. [prop-missing]

   test.js:7:3
   7| A.qux = function(x: string) { } // error
        ^^^

References:
   test.js:1:7
   1| class A {
            ^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:10:13

Cannot extend `A` [1] with `B` because string [2] is incompatible with number [3] in property `x`. [incompatible-extend]

   test.js:10:13
   10|   static x: string; // error
                   ^^^^^^ [2]

References:
   test.js:9:17
    9| class B extends A {
                       ^ [1]
   test.js:2:13
    2|   static x: number;
                   ^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- test.js:11:17

Cannot extend `A` [1] with `B` because string [2] is incompatible with number [3] in the first parameter of property
`foo`. [incompatible-extend]

   test.js:11:17
   11|   static foo(x: string) { } // error
                       ^^^^^^ [2]

References:
   test.js:9:17
    9| class B extends A {
                       ^ [1]
   test.js:4:17
    4|   static foo(x: number) { }
                       ^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- test.js:13:11

Cannot assign `0` to `B.x` because number [1] is incompatible with string [2]. [incompatible-type]

   test.js:13:11
   13|     B.x = 0; // error
                 ^ [1]

References:
   test.js:10:13
   10|   static x: string; // error
                   ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:15:11

Cannot call `B.foo` with `0` bound to `x` because number [1] is incompatible with string [2]. [incompatible-call]

   test.js:15:11
   15|     B.foo(0); // error
                 ^ [1]

References:
   test.js:11:17
   11|   static foo(x: string) { } // error
                       ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:17:11

Cannot assign `0` to `B.y` because number [1] is incompatible with string [2]. [incompatible-type]

   test.js:17:11
   17|     B.y = 0; // error
                 ^ [1]

References:
   test.js:3:13
    3|   static y: string;
                   ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:18:11

Cannot call `B.bar` with `0` bound to `y` because number [1] is incompatible with string [2]. [incompatible-call]

   test.js:18:11
   18|     B.bar(0); // error
                 ^ [1]

References:
   test.js:5:17
    5|   static bar(y: string) { }
                       ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:19:7

Cannot call `B.qux` because property `qux` is missing in statics of `B` [1]. [prop-missing]

   test.js:19:7
   19|     B.qux(0); // error
             ^^^

References:
   test.js:9:7
    9| class B extends A {
             ^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:26:12

Cannot return `new this()` because `B` [1] is incompatible with number [2]. [incompatible-return]

   test.js:26:12
   26|     return new this(); // error B ~> number
                  ^^^^^^^^^^ [1]

References:
   test.js:25:23
   25|   static badCreate(): number {
                             ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:40:7

Cannot call `D.foo` because property `foo` is missing in statics of `D` [1]. [prop-missing]

   test.js:40:7
   40|     D.foo(0); // error
             ^^^

References:
   test.js:38:7
   38| class D extends C<string> {
             ^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:42:11

Cannot call `D.bar` with `0` bound to `x` because number [1] is incompatible with string [2]. [incompatible-call]

   test.js:42:11
   42|     D.bar(0);
                 ^ [1]

References:
   test.js:38:19
   38| class D extends C<string> {
                         ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:47:2

Cannot cast `new A` to `typeof A` because `A` [1] is incompatible with class `A` [2]. [incompatible-cast]

   test.js:47:2
   47| (new A: typeof A);
        ^^^^^ [1]

References:
   test.js:47:9
   47| (new A: typeof A);
               ^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:53:10

Cannot call `this.bar` because property `bar` is missing in statics of `E` [1]. [prop-missing]

   test.js:53:10
   53|     this.bar(); // error
                ^^^

References:
   test.js:50:7
   50| class E {
             ^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:54:12

Cannot return `this.x` because number [1] is incompatible with string [2]. [incompatible-return]

   test.js:54:12
   54|     return this.x; // error
                  ^^^^^^

References:
   test.js:51:13
   51|   static x: number;
                   ^^^^^^ [1]
   test.js:52:17
   52|   static foo(): string {
                       ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:67:2

Cannot cast `N.x` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   test.js:67:2
   67| (N.x: empty); // ERROR
        ^^^

References:
   test.js:66:7
   66| N.x = 1; // OK
             ^ [1]
   test.js:67:7
   67| (N.x: empty); // ERROR
             ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:68:3

Cannot assign function to `N.xxx` because property `xxx` is missing in statics of `N` [1]. [prop-missing]

   test.js:68:3
   68| N.xxx = () => {}; // ERROR
         ^^^

References:
   test.js:58:7
   58| class N {
             ^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:75:2

Cannot cast `M.f()` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   test.js:75:2
   75| (M.f(): number); // ERROR
        ^^^^^

References:
   test.js:60:15
   60|   static f(): string {
                     ^^^^^^ [1]
   test.js:75:9
   75| (M.f(): number); // ERROR
               ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:76:2

Cannot cast `M.g()` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   test.js:76:2
   76| (M.g(): number); // ERROR
        ^^^^^

References:
   test.js:71:15
   71|   static g(): string {
                     ^^^^^^ [1]
   test.js:76:9
   76| (M.g(): number); // ERROR
               ^^^^^^ [2]



Found 22 errors
