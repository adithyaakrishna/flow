>>> arrow.js (#changes: 5)
// @flow

const f = (x: number) => x;
f(1)

const f2 = (x: number, y: string) => x;
f2(1, 'test')

const ret_val = (x: number): number => x;

const callback = (e: number) => e + 1;
[1, 2, 3].map(callback);

// Should be ignored
[1, 2, 3].map(e => e + 1);


>>> class.js (#changes: 7)
// @flow

class A {
  foo: A;
  declare bar: A;

  aMethod(x: number): number {
    this.foo = new A();
    this.bar = new A();
    return x + 1;
  }

  arrow = (x: boolean): boolean => x ? 0 : 1;
}

const a = new A();
a.aMethod(2);
a.arrow(true);

class B {
  prop1 = 42; // ok
  prop2: number = 10 + 30; // annot
  prop3: any; // annot
  prop4 = (x: number): number => 42; // ok
  prop5 = (x: number): number => 42; // annot return
  prop6 = function(x: number): number {
    return 42;
  } // annot return
  ;
  method1() {} // ok
  method2(): number {
    return 42;
  } // annot return
  constructor() {
    return 10;
  } // ok (but separately, we should error on returns in constructors no?)
  
  #priv1: number = 10 + 20; // annot
  #priv2: any; // annot
  
}

function sanity_check_that_we_dont_annotate_non_method_functions() {
  return 42;
}

>>> function.js (#changes: 13)
// @flow

function f(x: number) {
  return x;
}
f(1);

function f2(x: number, y: string) {
  return x == 1 ? y : null;
}
f2(1, 'test');

function internal_annot(x: string) {
  return (x: string);
}

function unknown(x: any) {
  return x;
}

function with_default(x: number=1) {
  return x;
}

function skip(x: number) {
  return x;
}

const f_expr = function fn_expr(x: string) {
  return (x: string);
}

function rest(x: number, ...args: [number, number, number]) {
  return x;
}
rest(1, 2, 3, 4);

function obj({num}: {| num: number |}) {
  return num;
}
obj({num: 1});

function arr([num, ...rest]: Array<number>) {
  return num;
}
arr([1, 2, 3, 4]);

function default_arr_ok([num=0]: Array<number>) {
  return 1;
}
default_arr_ok([1, 2, 3, 4]);

// This seems very rare. Causes a "Validation Error"
function default_arr_err([num=0]) {
  return 1;
}

// This seems very rare. Causes a "Validation Error"
function default_obj_err({x: y=1}) {
  return 1;
}

// Only annotate with `number` instead of `any | number`.
function any_propagation(props: number) {}
any_propagation(1);
(any_propagation: any);

>>> react.js (#changes: 1)
// @flow

import * as React from 'react';

function Component (props: {| label: string |} | {| label: string |}) {
  return <div>{props.label}</div>;
}

function Parent() {
  const a = Component({label: 'a'});
  return (
    <>
      {a}
      <Component label="b" />
    </>
  )
}

>>> this.js (#changes: 11)
// @flow

function f(this: {| x: number |}) {
  return this.x;
}
f.call({x: 1});

function withArg(this: {| x: number |}, y: number) {
  return this.x + y;
}
withArg.call({x: 1}, 1);

function withUnannotatedArg(this: {| x: number |}, y: number) {
  return this.x + y;
}
withUnannotatedArg.call({x: 1}, 1);

function unused(this: interface { x: any }) {
  return this.x;
}

function unusedTwoProps(this: interface { x1: any, z1: any }) {
  return this.x1 + this.z1;
}

function unusedMethod(this: interface { x1: any }) {
  return this.x1(1);
}

let object = {
  fn: function(this: {| fn: (y: number) => number, x: number |}, y: number) {
  return this.x + y;
},
  x: 1,
}
object.fn(1)

class HasThis {
  x: number;
  methodA(): number {
    return this.x;
  }
  methodB() {
    ((function(this: any) {
  // old style bind, expect any/$FlowFixMe
  return this.x;
})).bind(this);
  }

  arrow = (y: number): number => { // should annotate y but not `this`
    return this.x + (y: number);
  }
}

let arrow = () => { return this; }



>>> Launching report...

Stats:
  Files changed:                            5
  Number of annotations added:             37
  Total size of annotations:               47
  Number of LTI errors:                    46

Errors:
  Missing annot./normalizer error:          0
  Validation Error:                         7
  Import Error:
    Loc source none:                        0
    Indeterminate module type:              0
    No matching export:                     0
  Serializer error:                         0
  Unsupported error kind:                   0

Warnings:
  Skipping arrow function:                  0
  Large type added:                         0
  Location unhandled:                      12
  Empty NoUpper:                            4
  Empty SomeKnownUpper:                    18

