Error ------------------------------------------------------------------------------------------------ arr_rest.js:11:11

`Set` [1] is not an array. [not-an-array]

   arr_rest.js:11:11
   11| const [...y] = new Set() // still error
                 ^

References:
   arr_rest.js:11:16
   11| const [...y] = new Set() // still error
                      ^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------ arr_rest.js:11:20

Cannot call `Set` because `T` [1] is underconstrained by new `Set` [2]. Either add explicit type arguments or cast the
expression to your expected type. [underconstrained-implicit-instantiation]

   arr_rest.js:11:20
     11| const [...y] = new Set() // still error
                            ^^^

References:
   <BUILTINS>/core.js:1796:19
   1796| declare class Set<T> extends $ReadOnlySet<T> {
                           ^ [1]
   arr_rest.js:11:16
     11| const [...y] = new Set() // still error
                        ^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ arr_rest.js:17:52

Cannot call `arb` because `T` [1] is underconstrained by call of `arb` [2]. Either add explicit type arguments or cast
the expression to your expected type. [underconstrained-implicit-instantiation]

   arr_rest.js:17:52
   17| const w: [number, number, string, number] = [...z, arb(), ...arb()]; // incompat and instantiation errors
                                                          ^^^

References:
   arr_rest.js:13:22
   13| declare function arb<T>(): T;
                            ^ [1]
   arr_rest.js:17:52
   17| const w: [number, number, string, number] = [...z, arb(), ...arb()]; // incompat and instantiation errors
                                                          ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ arr_rest.js:17:62

Cannot call `arb` because `T` [1] is underconstrained by call of `arb` [2]. Either add explicit type arguments or cast
the expression to your expected type. [underconstrained-implicit-instantiation]

   arr_rest.js:17:62
   17| const w: [number, number, string, number] = [...z, arb(), ...arb()]; // incompat and instantiation errors
                                                                    ^^^

References:
   arr_rest.js:13:22
   13| declare function arb<T>(): T;
                            ^ [1]
   arr_rest.js:17:62
   17| const w: [number, number, string, number] = [...z, arb(), ...arb()]; // incompat and instantiation errors
                                                                    ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- async.js:17:16

Cannot call `commit` because property `variables` is missing in `Promise` [1]. [prop-missing]

   async.js:17:16
   17|   return await commit({});  // error: property 'variables' is missing (reference
                      ^^^^^^

References:
   async.js:16:21
   16| async function g(): Promise<{ variables: any }> {
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------- error_during_synthesis.js:6:32

Cannot call `expectString` with `3` bound to the first parameter because number [1] is incompatible with string [2].
[incompatible-call]

   error_during_synthesis.js:6:32
   6|   poly((v) => {}, expectString(3)); // Error: incompatible-call, but v can still be contextually typed
                                     ^ [1]

References:
   error_during_synthesis.js:5:33
   5|   declare function expectString(string): string;
                                      ^^^^^^ [2]


Error -------------------------------------------------------------------------------- immediate_call_expression.js:6:10

Cannot cast `x` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   immediate_call_expression.js:6:10
   6|         (x: string); // error number ~> string
               ^

References:
   immediate_call_expression.js:3:10
   3| const x: number => void = (function () {
               ^^^^^^ [1]
   immediate_call_expression.js:6:13
   6|         (x: string); // error number ~> string
                  ^^^^^^ [2]


Error ---------------------------------------------------------------------------------- implicit_instantiation.js:16:49

Cannot cast `a` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   implicit_instantiation.js:16:49
   16|   const reasonTest: (string) => mixed = (a) => (a: empty); // ok
                                                       ^

References:
   implicit_instantiation.js:16:22
   16|   const reasonTest: (string) => mixed = (a) => (a: empty); // ok
                            ^^^^^^ [1]
   implicit_instantiation.js:16:52
   16|   const reasonTest: (string) => mixed = (a) => (a: empty); // ok
                                                          ^^^^^ [2]


Error ---------------------------------------------------------------------------------- implicit_instantiation.js:62:39

Cannot assign `z3.concat(...)` to `z5` because number [1] is incompatible with string [2] in array element.
[incompatible-type]

   implicit_instantiation.js:62:39
   62|   const z5: Array<string> = z3.concat(1); // Only one error on 1 ~> string
                                             ^ [1]

References:
   implicit_instantiation.js:62:19
   62|   const z5: Array<string> = z3.concat(1); // Only one error on 1 ~> string
                         ^^^^^^ [2]


Error --------------------------------------------------------------------------------- implicit_instantiation.js:106:19

Cannot call `f` with empty string bound to the third parameter because string [1] is incompatible with number [2].
[incompatible-call]

   implicit_instantiation.js:106:19
   106|   f(3, (n) => {}, ""); // Error on third argument, but n can still be contextually typed.
                          ^^ [1]

References:
   implicit_instantiation.js:105:37
   105|   declare function f<A>(A, A=>void, number): void;
                                            ^^^^^^ [2]


Error ---------------------------------------------------------------------------------- implicit_instantiation.js:151:4

Cannot cast `a` to `Set` because string [1] is incompatible with empty [2] in type argument `T` [3]. [incompatible-cast]

   implicit_instantiation.js:151:4
    151|   (a: Set<empty>); // error Set<string> ~> Set<empty>
            ^

References:
   implicit_instantiation.js:148:29
    148| function test12(foo: ?Array<string>) {
                                     ^^^^^^ [1]
   implicit_instantiation.js:151:11
    151|   (a: Set<empty>); // error Set<string> ~> Set<empty>
                   ^^^^^ [2]
   <BUILTINS>/core.js:1796:19
   1796| declare class Set<T> extends $ReadOnlySet<T> {
                           ^ [3]


Error ---------------------------------------------------------------------------------- implicit_instantiation.js:152:4

Cannot cast `b` to `Set` because string [1] is incompatible with empty [2] in type argument `T` [3]. [incompatible-cast]

   implicit_instantiation.js:152:4
    152|   (b: Set<empty>); // error Set<string> ~> Set<empty>
            ^

References:
   implicit_instantiation.js:148:29
    148| function test12(foo: ?Array<string>) {
                                     ^^^^^^ [1]
   implicit_instantiation.js:152:11
    152|   (b: Set<empty>); // error Set<string> ~> Set<empty>
                   ^^^^^ [2]
   <BUILTINS>/core.js:1796:19
   1796| declare class Set<T> extends $ReadOnlySet<T> {
                           ^ [3]


Error -------------------------------------------------------------------------------------------- intersections.js:9:24

Cannot cast `x` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   intersections.js:9:24
   9|   foo('str', (x) => { (x: number); }); // error
                             ^

References:
   intersections.js:5:44
   5|   declare function foo(tag: 'str', cb: (x: string) => void): void;
                                                 ^^^^^^ [1]
   intersections.js:9:27
   9|   foo('str', (x) => { (x: number); }); // error
                                ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- intersections.js:10:3

Cannot call `foo` because: [incompatible-call]
 - Either string [1] is incompatible with string literal `boolean` [2].
 - Or string [1] is incompatible with string literal `str` [3].
 - Or string [1] is incompatible with string literal `num` [4].

   intersections.js:10:3
   10|   foo('a', (x) => { (x: number); }); // error
         ^^^

References:
   intersections.js:10:7
   10|   foo('a', (x) => { (x: number); }); // error
             ^^^ [1]
   intersections.js:4:29
    4|   declare function foo(tag: 'boolean', cb: (x: boolean) => void): void;
                                   ^^^^^^^^^ [2]
   intersections.js:5:29
    5|   declare function foo(tag: 'str', cb: (x: string) => void): void;
                                   ^^^^^ [3]
   intersections.js:6:29
    6|   declare function foo(tag: 'num', cb: (x: number) => void): void;
                                   ^^^^^ [4]


Error ------------------------------------------------------------------------------------------- intersections.js:10:13

An annotation on `x` is required because Flow cannot infer its type from local context. [missing-local-annot]

   10|   foo('a', (x) => { (x: number); }); // error
                   ^


Error ------------------------------------------------------------------------------------------- intersections.js:22:24

Cannot cast `x` to string because object type [1] is incompatible with string [2]. [incompatible-cast]

   intersections.js:22:24
   22|   foo('obj', (x) => { (x: string); }); // error
                              ^

References:
   intersections.js:17:33
   17|   type O = (tag: 'obj', cb: (x: {}) => void) => void;
                                       ^^ [1]
   intersections.js:22:27
   22|   foo('obj', (x) => { (x: string); }); // error
                                 ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- intersections.js:27:24

Cannot cast `x` to string because object type [1] is incompatible with string [2]. [incompatible-cast]

   intersections.js:27:24
   27|   bar('obj', (x) => { (x: string); }); // error
                              ^

References:
   intersections.js:17:33
   17|   type O = (tag: 'obj', cb: (x: {}) => void) => void;
                                       ^^ [1]
   intersections.js:27:27
   27|   bar('obj', (x) => { (x: string); }); // error
                                 ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- intersections.js:31:28

Cannot cast `x` to string because boolean [1] is incompatible with string [2]. [incompatible-cast]

   intersections.js:31:28
   31|   bak('boolean', (x) => { (x: string); }); // error in cast (ideally would pick the right overload)
                                  ^

References:
   intersections.js:14:37
   14|   type B = (tag: 'boolean', cb: (x: boolean) => void) => void;
                                           ^^^^^^^ [1]
   intersections.js:31:31
   31|   bak('boolean', (x) => { (x: string); }); // error in cast (ideally would pick the right overload)
                                     ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ lits.js:3:5

Cannot determine type of empty array literal. Please provide an annotation. [missing-empty-array-annot]

   3| let h = []; // err
          ^


Error ----------------------------------------------------------------------------------------------------- lits.js:8:19

Cannot assign array literal to `u` because empty array literal [1] has an arity of 0 but tuple type [2] has an arity of
1. [invalid-tuple-arity]

   lits.js:8:19
   8| let u: [number] = []; // err
                        ^^ [1]

References:
   lits.js:8:8
   8| let u: [number] = []; // err
             ^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- lits.js:37:22

Cannot determine type of empty array literal. Please provide an annotation. [missing-empty-array-annot]

   37|   const s1 = new Set([]); // error missing annotation on `[]` -- corresponds to EncounteredPlaceholder
                            ^^


Error ----------------------------------------------------------------------------------------------------- lits.js:43:4

Cannot cast `s2.values()` to `Iterator` because number [1] is incompatible with string [2] in type argument `T` [3].
[incompatible-cast]

   lits.js:43:4
     43|   (s2.values(): Iterator<string>); // error number ~> string
            ^^^^^^^^^^^

References:
   lits.js:41:17
     41|   const s2: Set<number> = new Set([]);
                         ^^^^^^ [1]
   lits.js:43:26
     43|   (s2.values(): Iterator<string>); // error number ~> string
                                  ^^^^^^ [2]
   <BUILTINS>/core.js:1677:16
   1677| type Iterator<+T> = $Iterator<T,void,void>;
                        ^ [3]


Error ----------------------------------------------------------------------------------------- misplaced_error.js:11:31

An annotation on destructuring is required because Flow cannot infer its type from local context. [missing-local-annot]

   11|   {...EMPTY_TEMPLATE, title: ({a}) => `${a}`}, // missing-local-annot due to inexact ~> exact
                                     ^^^


Error --------------------------------------------------------------------------- poly_class_static_sanity_test.js:14:25

Cannot resolve name `unbound_type`. [cannot-resolve-name]

   14| declare var unused_var: unbound_type; // sanity check: should surface this error
                               ^^^^^^^^^^^^


Error ---------------------------------------------------------------------------- poly_class_static_sanity_test.js:16:7

Cannot call `Map` because an index signature declaring the expected key / value type is missing in `$Iterable` [1].
[incompatible-call]

   poly_class_static_sanity_test.js:16:7
   16| List([Map({name: "abc"})]); // expected error
             ^^^

References:
   poly_class_static_sanity_test.js:5:20
    5|   static <T>(iter: immutable$JSIterable<T>): List<T>;
                          ^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- react_tests.js:21:6

Cannot cast `props` to empty because props [1] is incompatible with empty [2]. [incompatible-cast]

   react_tests.js:21:6
   21|     (props: empty); // error
            ^^^^^

References:
   react_tests.js:19:36
   19|   const _: React.AbstractComponent<{foo: string}> = (props) => {
                                          ^^^^^^^^^^^^^ [1]
   react_tests.js:21:13
   21|     (props: empty); // error
                   ^^^^^ [2]


Error --------------------------------------------------------------------------------------------- react_tests.js:39:24

Cannot cast `n` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   react_tests.js:39:24
   39|     {n => <Child foo={(n: empty)} /> /* ERROR */}
                              ^

References:
   react_tests.js:36:39
   36|   declare function Parent({children: (number) => React.Node}): React.Node;
                                             ^^^^^^ [1]
   react_tests.js:39:27
   39|     {n => <Child foo={(n: empty)} /> /* ERROR */}
                                 ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- refinements.js:8:22

Cannot cast `u` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   refinements.js:8:22
   8|   x.m && x.m(u => { (u: string); }); // error number ~> string
                           ^

References:
   refinements.js:6:33
   6|   declare var x: { m?: (cb: (n: number) => void) => void };
                                      ^^^^^^ [1]
   refinements.js:8:25
   8|   x.m && x.m(u => { (u: string); }); // error number ~> string
                              ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- refinements.js:12:7

Cannot call `x.m` because undefined [1] is not a function. [not-a-function]

   refinements.js:12:7
   12|     x.m(u => { (u: string); });  // error: undefined not a function & mising local annotation
             ^

References:
   refinements.js:6:24
    6|   declare var x: { m?: (cb: (n: number) => void) => void };
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- refinements.js:12:9

An annotation on `u` is required because Flow cannot infer its type from local context. [missing-local-annot]

   12|     x.m(u => { (u: string); });  // error: undefined not a function & mising local annotation
               ^


Error --------------------------------------------------------------------------------------------- refinements.js:20:17

Cannot cast `u` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   refinements.js:20:17
   20|     x.m(u => { (u: string); }); // error number ~> string
                       ^

References:
   refinements.js:6:33
    6|   declare var x: { m?: (cb: (n: number) => void) => void };
                                       ^^^^^^ [1]
   refinements.js:20:20
   20|     x.m(u => { (u: string); }); // error number ~> string
                          ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- refinements.js:27:24

Cannot cast `u` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   refinements.js:27:24
   27|   x?.m && x?.m(u => { (u: string); }); // error number ~> string
                              ^

References:
   refinements.js:25:34
   25|   declare var x: ?{ m?: (cb: (n: number) => void) => void };
                                        ^^^^^^ [1]
   refinements.js:27:27
   27|   x?.m && x?.m(u => { (u: string); }); // error number ~> string
                                 ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- refinements.js:31:8

Cannot call `x?.m` because undefined [1] is not a function. [not-a-function]

   refinements.js:31:8
   31|     x?.m(u => { (u: string); });  // error: undefined not a function & mising local annotation
              ^

References:
   refinements.js:25:25
   25|   declare var x: ?{ m?: (cb: (n: number) => void) => void };
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- refinements.js:31:10

An annotation on `u` is required because Flow cannot infer its type from local context. [missing-local-annot]

   31|     x?.m(u => { (u: string); });  // error: undefined not a function & mising local annotation
                ^


Error --------------------------------------------------------------------------------------------- refinements.js:39:18

Cannot cast `u` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   refinements.js:39:18
   39|     x?.m(u => { (u: string); }); // error number ~> string
                        ^

References:
   refinements.js:25:34
   25|   declare var x: ?{ m?: (cb: (n: number) => void) => void };
                                        ^^^^^^ [1]
   refinements.js:39:21
   39|     x?.m(u => { (u: string); }); // error number ~> string
                           ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ sentinel_refinements.js:51:37

Cannot assign object literal to `e1` because unknown element of empty array [1] is incompatible with string [2] in array
element of property `arr`. [incompatible-type]

   sentinel_refinements.js:51:37
   51| const e1: A = { __type__: a(), arr: [] }; // // err
                                           ^^ [1]

References:
   sentinel_refinements.js:7:38
    7| type A = { __type__: 'a', arr: Array<string> } | { __type__: 'b', arr: Array<number> };
                                            ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ sentinel_refinements.js:52:43

Cannot cast `v` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   sentinel_refinements.js:52:43
   52| const e2: F = { __type__: a(), f: (v) => (v: string) }; // error
                                                 ^

References:
   sentinel_refinements.js:8:80
    8| type F = { __type__: 'a', f: (v: string) => string } | { __type__: 'b', f: (v: number) => number };
                                                                                      ^^^^^^ [1]
   sentinel_refinements.js:52:46
   52| const e2: F = { __type__: a(), f: (v) => (v: string) }; // error
                                                    ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ sentinel_refinements.js:53:32

Cannot create `CompAProp` element because unknown element of empty array [1] is incompatible with string [2] in array
element of property `arr`. [incompatible-type]

   sentinel_refinements.js:53:32
   53| <CompAProp __type__={a()} arr={[]} />; // // err
                                      ^^ [1]

References:
   sentinel_refinements.js:7:38
    7| type A = { __type__: 'a', arr: Array<string> } | { __type__: 'b', arr: Array<number> };
                                            ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ sentinel_refinements.js:54:38

Cannot cast `v` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   sentinel_refinements.js:54:38
   54| <CompFProp __type__={a()} f={(v) => (v: string)} />; // error
                                            ^

References:
   sentinel_refinements.js:8:80
    8| type F = { __type__: 'a', f: (v: string) => string } | { __type__: 'b', f: (v: number) => number };
                                                                                      ^^^^^^ [1]
   sentinel_refinements.js:54:41
   54| <CompFProp __type__={a()} f={(v) => (v: string)} />; // error
                                               ^^^^^^ [2]


Error --------------------------------------------------------------------------------------- type_filter_union.js:10:50

Cannot get `(thumbnails ?? []).filter` because property `filter` [1] cannot be unbound from the context [2] where it was
defined. [method-unbinding]

   type_filter_union.js:10:50
    10| const loadedThumbnailsCount = (thumbnails ?? []).filter
                                                         ^^^^^^ [1]

References:
   <BUILTINS>/core.js:930:5
   930|     filter(callbackfn: typeof Boolean): Array<$NonMaybeType<T>>;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- under_constrained.js:5:5

An annotation on `y` is required because Flow cannot infer its type from local context. [missing-local-annot]

   5|   x(y => {}); // error missing annot
          ^


Error ---------------------------------------------------------------------------------------- under_constrained.js:10:5

An annotation on `y` is required because Flow cannot infer its type from local context. [missing-local-annot]

   10|   x(y => {}); // error missing annot
           ^


Error --------------------------------------------------------------------------------------------------- unions.js:4:62

An annotation on `v` is required because Flow cannot infer its type from local context. [missing-local-annot]

   4|     const x: { ['A' | 'B' ]: (number) => number } = { [42]: (v) => v };
                                                                   ^


Error --------------------------------------------------------------------------------------------------- unions.js:7:55

An annotation on `v` is required because Flow cannot infer its type from local context. [missing-local-annot]

   7|     const x: { ['A']: (number) => number } = { [42]: (v) => v };
                                                            ^


Error -------------------------------------------------------------------------------------------------- unions.js:10:40

An annotation on `v` is required because Flow cannot infer its type from local context. [missing-local-annot]

   10|     const x: { ... } | { ... } = { a: (v) => v };
                                              ^


Error -------------------------------------------------------------------------------------------------- unions.js:21:24

Cannot cast `x` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   unions.js:21:24
   21|     fn({ cb: (x) => { (x: string); } }); // error number ~> string
                              ^

References:
   unions.js:17:19
   17|     type NumCb = (number) => void;
                         ^^^^^^ [1]
   unions.js:21:27
   21|     fn({ cb: (x) => { (x: string); } }); // error number ~> string
                                 ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- unions.js:32:34

Cannot cast `x` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   unions.js:32:34
   32|   const x: B<string> = (x) => { (x: string); }; // error number ~> string
                                        ^

References:
   unions.js:31:24
   31|   type B<T> = A<T> | A<number>;
                              ^^^^^^ [1]
   unions.js:32:37
   32|   const x: B<string> = (x) => { (x: string); }; // error number ~> string
                                           ^^^^^^ [2]



Found 47 errors
