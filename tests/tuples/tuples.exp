Error ---------------------------------------------------------------------------------------------------- array.js:4:10

Cannot return `x` because array type [1] has an unknown number of elements, so is incompatible with tuple type [2].
[invalid-tuple-arity]

   array.js:4:10
   4|   return x; // Error, can't enforce arity when flowing array to tuple
               ^

References:
   array.js:3:18
   3| function foo1(x: Array<number>): [number, ?number] {
                       ^^^^^^^^^^^^^ [1]
   array.js:3:34
   3| function foo1(x: Array<number>): [number, ?number] {
                                       ^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- labeled.js:5:3

Cannot cast array literal to `A` because boolean [1] is incompatible with string [2] in index 0. [incompatible-cast]

   labeled.js:5:3
   5| ([true, 1]: A); // ERROR
        ^^^^ [1]

References:
   labeled.js:2:16
   2| type A = [foo: string, bar: number];
                     ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- labeled.js:11:8

Cannot cast array literal to `B` because boolean [1] is incompatible with number [2] in index 1. [incompatible-cast]

   labeled.js:11:8
   11| (["s", true]: B); // ERROR
              ^^^^ [1]

References:
   labeled.js:8:24
    8| type B = [string, bar: number];
                              ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- number-index.js:7:1

Cannot assign `123` to `tup[0]` because the index must be statically known to write a tuple element.
[invalid-tuple-index]

   7| tup[(0: number)] = 123;
      ^^^^^^^^^^^^^^^^


Error -------------------------------------------------------------------------------------------------- optional.js:4:2

Cannot cast array literal to tuple type because array literal [1] has an arity of 1 but tuple type [2] has an arity of
2. [invalid-tuple-arity]

   optional.js:4:2
   4| ([0]: [number, ?string]); // Error, arity is enforced
       ^^^ [1]

References:
   optional.js:4:7
   4| ([0]: [number, ?string]); // Error, arity is enforced
            ^^^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- optional.js:6:2

Cannot cast array literal to tuple type because empty array literal [1] has an arity of 0 but tuple type [2] has an
arity of 2. [invalid-tuple-arity]

   optional.js:6:2
   6| ([]: [?number, string]); // error, since second element is not marked optional
       ^^ [1]

References:
   optional.js:6:6
   6| ([]: [?number, string]); // error, since second element is not marked optional
           ^^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- optional.js:8:24

Optional tuple elements are not supported. [unsupported-syntax]

   8| type A = [foo: number, bar?: number]; // ERROR: syntax not supported
                             ^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------------------- spread.js:3:11

Tuple spread is not supported. [unsupported-syntax]

   3| type A = [...S]; // ERROR: syntax not supported
                ^^^^


Error --------------------------------------------------------------------------------------------------- spread.js:4:11

Tuple spread is not supported. [unsupported-syntax]

   4| type B = [...foo: S]; // ERROR: syntax not supported
                ^^^^^^^^^


Error --------------------------------------------------------------------------------------------------- too-few.js:5:5

Cannot call `foo` with array literal bound to `a` because array literal [1] has an arity of 1 but tuple type [2] has an
arity of 2. [invalid-tuple-arity]

   too-few.js:5:5
   5| foo([ {} ]); // error, too few elements in array passed to a tuple
          ^^^^^^ [1]

References:
   too-few.js:3:17
   3| function foo(a: [Object, Object]) {}
                      ^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- tuples.js:2:13

Cannot assign array literal to `b` because array literal [1] has an arity of 1 but tuple type [2] has an arity of 0.
[invalid-tuple-arity]

   tuples.js:2:13
   2| var b: [] = [123]; // Error - arity mismatch
                  ^^^^^ [1]

References:
   tuples.js:2:8
   2| var b: [] = [123]; // Error - arity mismatch
             ^^ [2]


Error --------------------------------------------------------------------------------------------------- tuples.js:3:19

Cannot assign array literal to `c` because empty array literal [1] has an arity of 0 but tuple type [2] has an arity of
1. [invalid-tuple-arity]

   tuples.js:3:19
   3| var c: [number] = []; // nope
                        ^^ [1]

References:
   tuples.js:3:8
   3| var c: [number] = []; // nope
             ^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- tuples.js:6:33

Cannot assign array literal to `f` because number [1] is incompatible with string [2] in index 1. [incompatible-type]

   tuples.js:6:33
   6| var f: [number, string] = [123, 456];
                                      ^^^ [1]

References:
   tuples.js:6:17
   6| var f: [number, string] = [123, 456];
                      ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- tuples.js:10:5

Cannot get `t[1]` because tuple type [1] only has 1 element, so index 1 is out of bounds. [invalid-tuple-index]

   tuples.js:10:5
   10|     t[1]; // error, out of bounds
           ^^^^

References:
   tuples.js:9:15
    9|   function(t: [number]) {
                     ^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- tuples.js:11:5

Cannot get `t[-1]` because tuple type [1] only has 1 element, so index -1 is out of bounds. [invalid-tuple-index]

   tuples.js:11:5
   11|     t[-1]; // error, out of bounds
           ^^^^^

References:
   tuples.js:9:15
    9|   function(t: [number]) {
                     ^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- tuples.js:15:7

Cannot get `t[0.5]` because the index into a tuple must be an integer, but `0.5` [1] is not an integer.
[invalid-tuple-index]

   15|     t[0.5]; // error: index out of bounds
             ^^^ [1]


Error --------------------------------------------------------------------------------------------------- tuples.js:16:7

Cannot get `t[0.0000000000000000000001]` because the index into a tuple must be an integer, but `1e-22` [1] is not an
integer. [invalid-tuple-index]

   16|     t[0.0000000000000000000001]; // error: index ("1e-22") out of bounds
             ^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- tuples.js:20:6

Cannot cast `t[1e0]` to boolean because string [1] is incompatible with boolean [2]. [incompatible-cast]

   tuples.js:20:6
   20|     (t[1e0]: boolean); // error: boolean !~> string
            ^^^^^^

References:
   tuples.js:19:24
   19|   function(t: [number, string]) {
                              ^^^^^^ [1]
   tuples.js:20:14
   20|     (t[1e0]: boolean); // error: boolean !~> string
                    ^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- tuples.js:21:6

Cannot cast `t[0.9999999999999999999999999999999999999999999]` to boolean because string [1] is incompatible with
boolean [2]. [incompatible-cast]

   tuples.js:21:6
   21|     (t[0.9999999999999999999999999999999999999999999]: boolean); // error: boolean !~> string
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   tuples.js:19:24
   19|   function(t: [number, string]) {
                              ^^^^^^ [1]
   tuples.js:21:56
   21|     (t[0.9999999999999999999999999999999999999999999]: boolean); // error: boolean !~> string
                                                              ^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- tuples.js:25:6

Cannot cast `t[56e-13214125]` to boolean because number [1] is incompatible with boolean [2]. [incompatible-cast]

   tuples.js:25:6
   25|     (t[56e-13214125]: boolean); // error: boolean !~> number
            ^^^^^^^^^^^^^^^

References:
   tuples.js:24:16
   24|   function(t: [number, string]) {
                      ^^^^^^ [1]
   tuples.js:25:23
   25|     (t[56e-13214125]: boolean); // error: boolean !~> number
                             ^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- tuples.js:30:7

Cannot get `t[x]` because the index into a tuple must be an integer, but `0.5` [1] is not an integer.
[invalid-tuple-index]

   tuples.js:30:7
   30|     t[x]; // error, not an integer
             ^

References:
   tuples.js:29:15
   29|     const x = 0.5;
                     ^^^ [1]


Error -------------------------------------------------------------------------------------------------- tuples.js:40:44

Cannot return `x.length` because length `2` (number) of tuple [1] is incompatible with string [2]. [incompatible-return]

   tuples.js:40:44
   40|     function a(x: [1, 2]): string { return x.length; }
                                                  ^^^^^^^^

References:
   tuples.js:40:19
   40|     function a(x: [1, 2]): string { return x.length; }
                         ^^^^^^ [1]
   tuples.js:40:28
   40|     function a(x: [1, 2]): string { return x.length; }
                                  ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- tuples.js:46:6

Cannot cast `a_len` to number literal `2` because length `1` (number) of tuple [1] is incompatible with number literal
`2` [2]. [incompatible-cast]

   tuples.js:46:6
   46|     (a_len: 2);
            ^^^^^

References:
   tuples.js:43:16
   43|   function (a: [number]) {
                      ^^^^^^^^ [1]
   tuples.js:46:13
   46|     (a_len: 2);
                   ^ [2]


Error -------------------------------------------------------------------------------------------------- variance.js:7:2

Cannot cast `a` to tuple type because tuple element at index `0` is read-only in `A` [1] but write-only in tuple
type [2]. [incompatible-variance]

   variance.js:7:2
   7| (a: [-foo: string]); // ERROR
       ^

References:
   variance.js:5:16
   5| declare var a: A;
                     ^ [1]
   variance.js:7:5
   7| (a: [-foo: string]); // ERROR
          ^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- variance.js:8:2

Cannot cast `a` to tuple type because tuple element at index `0` is read-only in `A` [1] but writable in tuple type [2].
[incompatible-variance]

   variance.js:8:2
   8| (a: [foo: string]); // ERROR
       ^

References:
   variance.js:5:16
   5| declare var a: A;
                     ^ [1]
   variance.js:8:5
   8| (a: [foo: string]); // ERROR
          ^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- variance.js:10:1

Cannot assign `"s"` to `a[0]` because tuple element at index `0` [1] labeled `foo` is not writable. [cannot-write]

   10| a[0] = "s"; // ERROR - can't write
       ^^^^ [1]


Error ------------------------------------------------------------------------------------------------- variance.js:16:2

Cannot cast `b` to tuple type because tuple element at index `0` is write-only in `B` [1] but read-only in tuple
type [2]. [incompatible-variance]

   variance.js:16:2
   16| (b: [+foo: string]); // ERROR
        ^

References:
   variance.js:14:16
   14| declare var b: B;
                      ^ [1]
   variance.js:16:5
   16| (b: [+foo: string]); // ERROR
           ^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- variance.js:17:2

Cannot cast `b` to tuple type because tuple element at index `0` is write-only in `B` [1] but readable in tuple
type [2]. [incompatible-variance]

   variance.js:17:2
   17| (b: [foo: string]); // ERROR
        ^

References:
   variance.js:14:16
   14| declare var b: B;
                      ^ [1]
   variance.js:17:5
   17| (b: [foo: string]); // ERROR
           ^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- variance.js:18:2

Cannot get `b[0]` because tuple element at index `0` [1] labeled `foo` is not readable. [cannot-read]

   18| (b[0]: string); // ERROR - can't read
        ^^^^ [1]


Error ------------------------------------------------------------------------------------------------- variance.js:27:2

Cannot cast `c` to tuple type because string [1] is incompatible with undefined [2] in index 0. [incompatible-cast]

   variance.js:27:2
   27| (c: [foo: string | void]); // ERROR
        ^

References:
   variance.js:21:16
   21| type C = [foo: string];
                      ^^^^^^ [1]
   variance.js:27:20
   27| (c: [foo: string | void]); // ERROR
                          ^^^^ [2]


Error ------------------------------------------------------------------------------------------------- variance.js:28:2

Cannot cast `c` to tuple type because undefined [1] is incompatible with string [2] in index 0. [incompatible-cast]

   variance.js:28:2
   28| (c: [-foo: string | void]); // ERROR
        ^

References:
   variance.js:28:21
   28| (c: [-foo: string | void]); // ERROR
                           ^^^^ [1]
   variance.js:21:16
   21| type C = [foo: string];
                      ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- variance.js:33:2

Cannot cast `d` to tuple type because undefined [1] is incompatible with string [2] in index 0. [incompatible-cast]

   variance.js:33:2
   33| (d: [foo: string]); // ERROR
        ^

References:
   variance.js:32:26
   32| declare var d: [string | void];
                                ^^^^ [1]
   variance.js:33:11
   33| (d: [foo: string]); // ERROR
                 ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- variance.js:39:2

Cannot cast `m` to `K` because tuple element at index `0` is read-only in tuple type [1] but writable in tuple type [2]
in type argument `T` [3]. [incompatible-variance]

   variance.js:39:2
   39| (m: K<[string]>); // ERROR
        ^

References:
   variance.js:37:18
   37| declare var m: K<[+foo: string]>;
                        ^^^^^^^^^^^^^^ [1]
   variance.js:39:7
   39| (m: K<[string]>); // ERROR
             ^^^^^^^^ [2]
   variance.js:36:17
   36| declare class K<T> {}
                       ^ [3]


Error ------------------------------------------------------------------------------------------------ variance.js:44:15

Cannot call `f` with `n` bound to the first parameter because tuple element at index `0` is read-only in tuple type [1]
but writable in tuple type [2] in array element. [incompatible-variance]

   variance.js:44:15
   44| const res = f(n); // ERROR
                     ^

References:
   variance.js:43:22
   43| declare var n: Array<[+n: number]>;
                            ^^^^^^^^^^^^ [1]
   variance.js:42:29
   42| declare function f<K>(Array<[K]>): K;
                                   ^^^ [2]


Error ------------------------------------------------------------------------------------------------- variance.js:46:2

Cannot cast `res` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   variance.js:46:2
   46| (res: empty); // ERROR
        ^^^

References:
   variance.js:43:27
   43| declare var n: Array<[+n: number]>;
                                 ^^^^^^ [1]
   variance.js:46:7
   46| (res: empty); // ERROR
             ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ variance.js:51:26

Incorrect arguments passed to call of method `assign` because tuple element at index `0` [1] labeled `foo` is not
readable. [cannot-read]

   variance.js:51:26
   51| Object.assign({a: 1}, ...osw); // ERROR - can't read
                                ^^^

References:
   variance.js:50:18
   50| declare var osw: [-foo: {a: number}];
                        ^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- variance.js:57:2

Cannot cast `roc` to tuple type because tuple element at index `0` is read-only in `ROC` [1] but write-only in tuple
type [2]. [incompatible-variance]

   variance.js:57:2
   57| (roc: [-foo: string]); // ERROR
        ^^^

References:
   variance.js:55:18
   55| declare var roc: ROC;
                        ^^^ [1]
   variance.js:57:7
   57| (roc: [-foo: string]); // ERROR
             ^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- variance.js:58:2

Cannot cast `roc` to tuple type because tuple element at index `0` is read-only in `ROC` [1] but writable in tuple
type [2]. [incompatible-variance]

   variance.js:58:2
   58| (roc: [foo: string]); // ERROR
        ^^^

References:
   variance.js:55:18
   55| declare var roc: ROC;
                        ^^^ [1]
   variance.js:58:7
   58| (roc: [foo: string]); // ERROR
             ^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- variance.js:60:1

Cannot assign `"s"` to `roc[0]` because tuple element at index `0` [1] labeled `foo` is not writable. [cannot-write]

   60| roc[0] = "s"; // ERROR - can't write
       ^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- variance.js:65:2

Cannot cast `rob` to tuple type because tuple element at index `0` is read-only in `ROB` [1] but write-only in tuple
type [2]. [incompatible-variance]

   variance.js:65:2
   65| (rob: [-foo: string]); // ERROR
        ^^^

References:
   variance.js:63:18
   63| declare var rob: ROB;
                        ^^^ [1]
   variance.js:65:7
   65| (rob: [-foo: string]); // ERROR
             ^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- variance.js:66:2

Cannot cast `rob` to tuple type because tuple element at index `0` is read-only in `ROB` [1] but writable in tuple
type [2]. [incompatible-variance]

   variance.js:66:2
   66| (rob: [foo: string]); // ERROR
        ^^^

References:
   variance.js:63:18
   63| declare var rob: ROB;
                        ^^^ [1]
   variance.js:66:7
   66| (rob: [foo: string]); // ERROR
             ^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- variance.js:68:1

Cannot assign `"s"` to `rob[0]` because tuple element at index `0` [1] labeled `foo` is not writable. [cannot-write]

   68| rob[0] = "s"; // ERROR - can't write
       ^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- variance.js:72:1

Cannot assign `"s"` to `u[0]` because tuple element at index `0` [1] is not writable. [cannot-write]

   72| u[0] = "s"; // ERROR - can't write
       ^^^^ [1]


Error ------------------------------------------------------------------------------------------------- variance.js:78:1

Cannot assign `"s"` to `inter[0]` because tuple element at index `0` [1] is not writable. [cannot-write]

   78| inter[0] = "s"; // ERROR - can't write
       ^^^^^^^^ [1]



Found 44 errors
