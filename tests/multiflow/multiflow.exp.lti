Error ---------------------------------------------------------------------------------------------------- apply.js:12:7

Cannot call `apply` with `noRest1` bound to `fn` because number [1] is incompatible with number literal `123` [2] in the
second argument. [incompatible-call]

   apply.js:12:7
   12| apply(noRest1, ['hi', 456]); // Error - 456 ~> 123
             ^^^^^^^

References:
   apply.js:12:23
   12| apply(noRest1, ['hi', 456]); // Error - 456 ~> 123
                             ^^^ [1]
   apply.js:10:30
   10| function noRest1(x: 'hi', y: 123): true { return true; }
                                    ^^^ [2]


Error ---------------------------------------------------------------------------------------------------- apply.js:13:7

Cannot call `apply` with `noRest1` bound to `fn` because function [1] requires another argument from function type [2].
[incompatible-call]

   apply.js:13:7
   13| apply(noRest1, ['hi']); // Error - too few args
             ^^^^^^^

References:
   apply.js:10:1
   10| function noRest1(x: 'hi', y: 123): true { return true; }
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   apply.js:4:7
    4|   fn: (...Args) => Ret,
             ^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- apply.js:19:7

Cannot call `apply` with `withRest1` bound to `fn` because number [1] is incompatible with number literal `123` [2] in
index 1. [incompatible-call]

   apply.js:19:7
   19| apply(withRest1, ['hi', 456]); // Error - 456 ~> 123
             ^^^^^^^^^

References:
   apply.js:19:25
   19| apply(withRest1, ['hi', 456]); // Error - 456 ~> 123
                               ^^^ [1]
   apply.js:17:36
   17| function withRest1(...rest: ['hi', 123]): true { return true; }
                                          ^^^ [2]


Error ---------------------------------------------------------------------------------------------------- apply.js:20:7

Cannot call `apply` with `withRest1` bound to `fn` because rest array [1] has an arity of 1 but tuple type [2] has an
arity of 2. [invalid-tuple-arity]

   apply.js:20:7
   20| apply(withRest1, ['hi']); // Error - too few args
             ^^^^^^^^^

References:
   apply.js:4:7
    4|   fn: (...Args) => Ret,
             ^^^^^^^^^^^^^^^^ [1]
   apply.js:17:29
   17| function withRest1(...rest: ['hi', 123]): true { return true; }
                                   ^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- apply.js:21:7

Cannot call `apply` with `withRest1` bound to `fn` because rest array [1] has an arity of 3 but tuple type [2] has an
arity of 2. [invalid-tuple-arity]

   apply.js:21:7
   21| apply(withRest1, ['hi', 123, false]); // Error - too many args
             ^^^^^^^^^

References:
   apply.js:4:7
    4|   fn: (...Args) => Ret,
             ^^^^^^^^^^^^^^^^ [1]
   apply.js:17:29
   17| function withRest1(...rest: ['hi', 123]): true { return true; }
                                   ^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- apply.js:31:11

Cannot call `applyType` with `noRest2` bound to `fn` because number [1] is incompatible with number literal `123` [2] in
the second argument. [incompatible-call]

   apply.js:31:11
   31| applyType(noRest2, ['hi', 456]); // Error - 456 ~> 123
                 ^^^^^^^

References:
   apply.js:31:27
   31| applyType(noRest2, ['hi', 456]); // Error - 456 ~> 123
                                 ^^^ [1]
   apply.js:29:30
   29| function noRest2(x: 'hi', y: 123): true { return true; }
                                    ^^^ [2]


Error --------------------------------------------------------------------------------------------------- apply.js:32:11

Cannot call `applyType` with `noRest2` bound to `fn` because function [1] requires another argument from function
type [2]. [incompatible-call]

   apply.js:32:11
   32| applyType(noRest2, ['hi']); // Error - too few args
                 ^^^^^^^

References:
   apply.js:29:1
   29| function noRest2(x: 'hi', y: 123): true { return true; }
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   apply.js:25:7
   25|   fn: (...Args) => Ret,
             ^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- apply.js:38:11

Cannot call `applyType` with `withRest2` bound to `fn` because number [1] is incompatible with number literal `123` [2]
in index 1. [incompatible-call]

   apply.js:38:11
   38| applyType(withRest2, ['hi', 456]); // Error - 456 ~> 123
                 ^^^^^^^^^

References:
   apply.js:38:29
   38| applyType(withRest2, ['hi', 456]); // Error - 456 ~> 123
                                   ^^^ [1]
   apply.js:36:36
   36| function withRest2(...rest: ['hi', 123]): true { return true; }
                                          ^^^ [2]


Error --------------------------------------------------------------------------------------------------- apply.js:39:11

Cannot call `applyType` with `withRest2` bound to `fn` because rest array [1] has an arity of 1 but tuple type [2] has
an arity of 2. [invalid-tuple-arity]

   apply.js:39:11
   39| applyType(withRest2, ['hi']); // Error - too few args
                 ^^^^^^^^^

References:
   apply.js:25:7
   25|   fn: (...Args) => Ret,
             ^^^^^^^^^^^^^^^^ [1]
   apply.js:36:29
   36| function withRest2(...rest: ['hi', 123]): true { return true; }
                                   ^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- apply.js:40:11

Cannot call `applyType` with `withRest2` bound to `fn` because rest array [1] has an arity of 3 but tuple type [2] has
an arity of 2. [invalid-tuple-arity]

   apply.js:40:11
   40| applyType(withRest2, ['hi', 123, false]); // Error - too many args
                 ^^^^^^^^^

References:
   apply.js:25:7
   25|   fn: (...Args) => Ret,
             ^^^^^^^^^^^^^^^^ [1]
   apply.js:36:29
   36| function withRest2(...rest: ['hi', 123]): true { return true; }
                                   ^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ jsx.js:30:3

Cannot create `AcceptsWhatever` element because string [1] is incompatible with number [2] in the return value.
[incompatible-use]

   jsx.js:30:3
   30| (<AcceptsWhatever />: number); // Error string ~> number
         ^^^^^^^^^^^^^^^

References:
   jsx.js:29:68
   29| declare function AcceptsWhatever(props: {} | null, children: any): string;
                                                                          ^^^^^^ [1]
   jsx.js:30:23
   30| (<AcceptsWhatever />: number); // Error string ~> number
                             ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ jsx.js:31:3

Cannot create `AcceptsWhatever` element because string [1] is incompatible with number [2] in the return value.
[incompatible-use]

   jsx.js:31:3
   31| (<AcceptsWhatever name="hi">Text</AcceptsWhatever>: number); // Error string ~> number
         ^^^^^^^^^^^^^^^

References:
   jsx.js:29:68
   29| declare function AcceptsWhatever(props: {} | null, children: any): string;
                                                                          ^^^^^^ [1]
   jsx.js:31:53
   31| (<AcceptsWhatever name="hi">Text</AcceptsWhatever>: number); // Error string ~> number
                                                           ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ jsx.js:34:3

Cannot create `ExpectsProps` element because property `name` is missing in object type [1] but exists in object type [2]
in the first parameter. [incompatible-use]

   jsx.js:34:3
   34| (<ExpectsProps />); // Error - missing prop
         ^^^^^^^^^^^^

References:
   jsx.js:10:14
   10|   C: (props: {}, children: Children) => Elem
                    ^^ [1]
   jsx.js:33:38
   33| declare function ExpectsProps(props: { name: string }, children: any): string;
                                            ^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ jsx.js:35:3

Cannot create `ExpectsProps` element because string [1] is incompatible with number [2] in the return value.
[incompatible-use]

   jsx.js:35:3
   35| (<ExpectsProps name="hi">Text</ExpectsProps>: number); // Error string ~> number
         ^^^^^^^^^^^^

References:
   jsx.js:33:72
   33| declare function ExpectsProps(props: { name: string }, children: any): string;
                                                                              ^^^^^^ [1]
   jsx.js:35:47
   35| (<ExpectsProps name="hi">Text</ExpectsProps>: number); // Error string ~> number
                                                     ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ jsx.js:38:3

Cannot create `ExpectsChildrenTuple` element because rest array [1] has an arity of 0 but tuple type [2] has an arity of
1. [incompatible-use]

   jsx.js:38:3
   38| (<ExpectsChildrenTuple />); // Error - missing child
         ^^^^^^^^^^^^^^^^^^^^

References:
   jsx.js:38:2
   38| (<ExpectsChildrenTuple />); // Error - missing child
        ^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   jsx.js:37:61
   37| declare function ExpectsChildrenTuple(props: any, children: [string]): string;
                                                                   ^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ jsx.js:40:3

Cannot create `ExpectsChildrenTuple` element because number [1] is incompatible with string [2] in index 0.
[incompatible-use]

   jsx.js:40:3
   40| (<ExpectsChildrenTuple>{123}</ExpectsChildrenTuple>); // Error: number ~> string
         ^^^^^^^^^^^^^^^^^^^^

References:
   jsx.js:40:25
   40| (<ExpectsChildrenTuple>{123}</ExpectsChildrenTuple>); // Error: number ~> string
                               ^^^ [1]
   jsx.js:37:62
   37| declare function ExpectsChildrenTuple(props: any, children: [string]): string;
                                                                    ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ jsx.js:41:3

Cannot create `ExpectsChildrenTuple` element because rest array [1] has an arity of 2 but tuple type [2] has an arity of
1. [incompatible-use]

   jsx.js:41:3
   41| (<ExpectsChildrenTuple>Hi {"there"}</ExpectsChildrenTuple>); // Error: too many children
         ^^^^^^^^^^^^^^^^^^^^

References:
   jsx.js:41:2
   41| (<ExpectsChildrenTuple>Hi {"there"}</ExpectsChildrenTuple>); // Error: too many children
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   jsx.js:37:61
   37| declare function ExpectsChildrenTuple(props: any, children: [string]): string;
                                                                   ^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ jsx.js:46:3

Cannot create `ExpectsChildrenArray` element because number [1] is incompatible with string [2] in array element.
[incompatible-use]

   jsx.js:46:3
   46| (<ExpectsChildrenArray>{123}</ExpectsChildrenArray>); // Error: number ~> string
         ^^^^^^^^^^^^^^^^^^^^

References:
   jsx.js:46:25
   46| (<ExpectsChildrenArray>{123}</ExpectsChildrenArray>); // Error: number ~> string
                               ^^^ [1]
   jsx.js:43:67
   43| declare function ExpectsChildrenArray(props: any, children: Array<string>): string;
                                                                         ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- spread.js:7:37

Cannot call `fun` because no more than 2 arguments are expected by function [1]. [extra-arg]

   spread.js:7:37
   7| fun(...['hi'], ...[], ...[123], ...[true]); // Error - true is unused
                                          ^^^^

References:
   spread.js:3:1
   3| function fun(x: 'hi', y: 123) {}
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- spread.js:8:31

Cannot call `fun` because no more than 2 arguments are expected by function [1]. [extra-arg]

   spread.js:8:31
   8| fun(...['hi'], ...[true], ...[123]); // Error: true ~> 123 and 123 is unused
                                    ^^^

References:
   spread.js:3:1
   3| function fun(x: 'hi', y: 123) {}
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- spread.js:8:20

Cannot call `fun` with boolean bound to `y` because boolean [1] is incompatible with number literal `123` [2].
[incompatible-call]

   spread.js:8:20
   8| fun(...['hi'], ...[true], ...[123]); // Error: true ~> 123 and 123 is unused
                         ^^^^ [1]

References:
   spread.js:3:26
   3| function fun(x: 'hi', y: 123) {}
                               ^^^ [2]


Error -------------------------------------------------------------------------------------------------- spread.js:19:33

Cannot call `funWithRestArray` with boolean bound to `y` because boolean [1] is incompatible with number literal
`123` [2]. [incompatible-call]

   spread.js:19:33
   19| funWithRestArray(...['hi'], ...[true], ...[123]); // Error: true ~> 123
                                       ^^^^ [1]

References:
   spread.js:14:39
   14| function funWithRestArray(x: 'hi', y: 123, ...rest: Array<number>) {}
                                             ^^^ [2]


Error -------------------------------------------------------------------------------------------------- spread.js:28:37

Cannot call `funWithRestArray` because string [1] is incompatible with number literal `123` [2]. [incompatible-call]

   spread.js:28:37
   28| funWithRestArray('hi', ...arrOf123, 'bye', ...arrOf123);
                                           ^^^^^ [1]

References:
   spread.js:14:39
   14| function funWithRestArray(x: 'hi', y: 123, ...rest: Array<number>) {}
                                             ^^^ [2]


Error -------------------------------------------------------------------------------------------------- spread.js:28:37

Cannot call `funWithRestArray` because string [1] is incompatible with number [2] in array element. [incompatible-call]

   spread.js:28:37
   28| funWithRestArray('hi', ...arrOf123, 'bye', ...arrOf123);
                                           ^^^^^ [1]

References:
   spread.js:14:59
   14| function funWithRestArray(x: 'hi', y: 123, ...rest: Array<number>) {}
                                                                 ^^^^^^ [2]



Found 24 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
