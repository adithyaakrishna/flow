Error --------------------------------------------------------------------------------------------------- bigint.js:13:5

Cannot assign `x` to `z` because bigint [1] is incompatible with bigint literal `10n` [2]. [incompatible-type]

   bigint.js:13:5
   13| z = x; // error, bigint </: 10n
           ^

References:
   bigint.js:5:8
    5| let y: bigint = 10n;
              ^^^^^^ [1]
   bigint.js:7:8
    7| let z: 10n = 10n;
              ^^^ [2]


Error --------------------------------------------------------------------------------------------------- bigint.js:22:8

Cannot call `BigInt` with `null` bound to `value` because: [incompatible-call]
 - Either null [1] is incompatible with boolean [2].
 - Or null [1] is incompatible with string [3].
 - Or null [1] is incompatible with number [4].
 - Or null [1] is incompatible with bigint [5].
 - Or null [1] is incompatible with interface type [6].
 - Or null [1] is incompatible with read-only array type [7].

   bigint.js:22:8
     22| BigInt(null); // error
                ^^^^ [1]

References:
   <BUILTINS>/core.js:2630:18
   2630|   static (value: boolean | string | number | bigint | interface {} | $ReadOnlyArray<mixed>): bigint;
                          ^^^^^^^ [2]
   <BUILTINS>/core.js:2630:28
   2630|   static (value: boolean | string | number | bigint | interface {} | $ReadOnlyArray<mixed>): bigint;
                                    ^^^^^^ [3]
   <BUILTINS>/core.js:2630:37
   2630|   static (value: boolean | string | number | bigint | interface {} | $ReadOnlyArray<mixed>): bigint;
                                             ^^^^^^ [4]
   <BUILTINS>/core.js:2630:46
   2630|   static (value: boolean | string | number | bigint | interface {} | $ReadOnlyArray<mixed>): bigint;
                                                      ^^^^^^ [5]
   <BUILTINS>/core.js:2630:55
   2630|   static (value: boolean | string | number | bigint | interface {} | $ReadOnlyArray<mixed>): bigint;
                                                               ^^^^^^^^^^^^ [6]
   <BUILTINS>/core.js:2630:70
   2630|   static (value: boolean | string | number | bigint | interface {} | $ReadOnlyArray<mixed>): bigint;
                                                                              ^^^^^^^^^^^^^^^^^^^^^ [7]


Error --------------------------------------------------------------------------------------------------- bigint.js:27:6

Cannot cast `foo` to empty because bigint [1] is incompatible with empty [2]. [incompatible-cast]

   bigint.js:27:6
   27|     (foo : empty); // error
            ^^^

References:
   bigint.js:25:5
   25| if (typeof foo === "bigint") {
           ^^^^^^^^^^^^^^^^^^^^^^^ [1]
   bigint.js:27:12
   27|     (foo : empty); // error
                  ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- bigint.js:39:2

Cannot compare bigint [1] to string [2]. [invalid-compare]

   bigint.js:39:2
   39| (0n > ""); // error
        ^^ [1]

References:
   bigint.js:39:7
   39| (0n > ""); // error
             ^^ [2]


Error --------------------------------------------------------------------------------------------------- bigint.js:42:5

Sketchy null check on bigint [1] which is potentially 0n. Perhaps you meant to check for null or undefined [2]?
[sketchy-null-bigint]

   bigint.js:42:5
   42| if (b) {} // error
           ^

References:
   bigint.js:41:17
   41| declare var b: ?bigint;
                       ^^^^^^ [1]
   bigint.js:41:16
   41| declare var b: ?bigint;
                      ^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- imported.js:5:2

Cannot cast `x` to empty because bigint [1] is incompatible with empty [2]. [incompatible-cast]

   imported.js:5:2
   5| (x : empty); // error
       ^

References:
   exported.js:1:18
   1| export const x = 1n;
                       ^^ [1]
   imported.js:5:6
   5| (x : empty); // error
           ^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- imported.js:8:2

Cannot cast `y` to empty because bigint [1] is incompatible with empty [2]. [incompatible-cast]

   imported.js:8:2
   8| (y : empty); // error
       ^

References:
   exported.js:2:16
   2| export default 2n;
                     ^^ [1]
   imported.js:8:6
   8| (y : empty); // error
           ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- imported.js:11:2

Cannot cast `z` to empty because bigint [1] is incompatible with empty [2]. [incompatible-cast]

   imported.js:11:2
   11| (z : empty); // error
        ^

References:
   exported.js:3:18
    3| export const z = -1n;
                        ^^^ [1]
   imported.js:11:6
   11| (z : empty); // error
            ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- imported.js:14:2

Cannot cast `a` to empty because bigint [1] is incompatible with empty [2]. [incompatible-cast]

   imported.js:14:2
   14| (a : empty); // error
        ^

References:
   exported.js:4:18
    4| export const a = ~1n;
                        ^^^ [1]
   imported.js:14:6
   14| (a : empty); // error
            ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- imported.js:17:2

Cannot cast `c` to empty because bigint [1] is incompatible with empty [2]. [incompatible-cast]

   imported.js:17:2
   17| (c : empty); // error
        ^

References:
   exported.js:6:18
    6| export const c = b++;
                        ^^^ [1]
   imported.js:17:6
   17| (c : empty); // error
            ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- unions.js:7:10

Cannot return `x` because number literal `1` [1] is incompatible with literal union [2]. [incompatible-return]

   unions.js:7:10
   7|   return x; // fast path error
               ^

References:
   unions.js:6:15
   6| function f(x: nums): bigints {
                    ^^^^ [1]
   unions.js:6:22
   6| function f(x: nums): bigints {
                           ^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- unions.js:7:10

Cannot return `x` because number literal `2` [1] is incompatible with literal union [2]. [incompatible-return]

   unions.js:7:10
   7|   return x; // fast path error
               ^

References:
   unions.js:6:15
   6| function f(x: nums): bigints {
                    ^^^^ [1]
   unions.js:6:22
   6| function f(x: nums): bigints {
                           ^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- unions.js:11:10

Cannot return `x` because bigint literal `1n` [1] is incompatible with literal union [2]. [incompatible-return]

   unions.js:11:10
   11|   return x; // fast path error
                ^

References:
   unions.js:10:15
   10| function g(x: bigints): nums {
                     ^^^^^^^ [1]
   unions.js:10:25
   10| function g(x: bigints): nums {
                               ^^^^ [2]


Error -------------------------------------------------------------------------------------------------- unions.js:11:10

Cannot return `x` because bigint literal `2n` [1] is incompatible with literal union [2]. [incompatible-return]

   unions.js:11:10
   11|   return x; // fast path error
                ^

References:
   unions.js:10:15
   10| function g(x: bigints): nums {
                     ^^^^^^^ [1]
   unions.js:10:25
   10| function g(x: bigints): nums {
                               ^^^^ [2]



Found 14 errors
