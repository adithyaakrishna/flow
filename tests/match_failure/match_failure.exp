Error ------------------------------------------------------------------------------------------- disjoint_union.js:8:22

Cannot compare string [1] with property `type` of `shape` [2] because: [incompatible-type]
 - Either string [1] is incompatible with string literal `rectangle` [3].
 - Or string [1] is incompatible with string literal `circle` [4].

   disjoint_union.js:8:22
   8|   if (shape.type === 'square') { // error
                           ^^^^^^^^ [1]

References:
   disjoint_union.js:7:15
   7| function area(shape: Shape): number {
                    ^^^^^ [2]
   disjoint_union.js:4:10
   4|   {type: 'rectangle', width: number, height: number} |
               ^^^^^^^^^^^ [3]
   disjoint_union.js:5:10
   5|   {type: 'circle', radius: number};
               ^^^^^^^^ [4]


Error ------------------------------------------------------------------------------------------ disjoint_union.js:21:22

Cannot compare string [1] with property `type` of `shape` [2] because: [incompatible-type]
 - Either string [1] is incompatible with string literal `rectangle` [3].
 - Or string [1] is incompatible with string literal `circle` [4].

   disjoint_union.js:21:22
   21|   if (shape.type === 'square') { // error
                            ^^^^^^^^ [1]

References:
   disjoint_union.js:20:16
   20| function area2(shape: ExactShape): number {
                      ^^^^^ [2]
   disjoint_union.js:17:11
   17|   {|type: 'rectangle', width: number, height: number|} |
                 ^^^^^^^^^^^ [3]
   disjoint_union.js:18:11
   18|   {|type: 'circle', radius: number|};
                 ^^^^^^^^ [4]


Error ------------------------------------------------------------------------------------------ disjoint_union.js:34:22

Cannot compare string [1] with property `type` of `shape` [2] because: [incompatible-type]
 - Either string [1] is incompatible with string literal `rectangle` [3].
 - Or string [1] is incompatible with string literal `circle` [4].

   disjoint_union.js:34:22
   34|   if (shape.type === 'square') { // error
                            ^^^^^^^^ [1]

References:
   disjoint_union.js:33:16
   33| function area3(shape: ReadOnlyShape): number {
                      ^^^^^ [2]
   disjoint_union.js:30:11
   30|   {+type: 'rectangle', width: number, height: number} |
                 ^^^^^^^^^^^ [3]
   disjoint_union.js:31:11
   31|   {+type: 'circle', radius: number};
                 ^^^^^^^^ [4]


Error ----------------------------------------------------------------------------------------------------- enum.js:8:25

number literal `2` [1] is incompatible with literal union [2]. [incompatible-type]

   enum.js:8:25
   8|   } else if (binary === 2) { // oops
                              ^ [1]

References:
   enum.js:5:34
   5| function stringifyBinary(binary: Binary): string {
                                       ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- generics.js:5:19

Cannot compare string [1] with property `type` of `mm` [2] because string [1] is incompatible with literal union [3].
[incompatible-type]

   generics.js:5:19
   5|   if (mm.type === 'q'); // Error 'q' is not included in 's' | 'p'
                        ^^^ [1]

References:
   generics.js:3:27
   3| function f1<T: 's' | 'p'>(mm: { type: T }) {
                                ^^ [2]
   generics.js:3:16
   3| function f1<T: 's' | 'p'>(mm: { type: T }) {
                     ^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------------------ generics.js:14:19

Cannot compare string [1] with property `type` of `mm` [2] because: [incompatible-type]
 - Either string [1] is incompatible with string literal `s` [3].
 - Or string [1] is incompatible with string literal `p` [4].

   generics.js:14:19
   14|   if (mm.type === 'q'); // Error 'q' is not included in 's' | 'p'
                         ^^^ [1]

References:
   generics.js:11:9
   11|   const mm: M = m_orig;
               ^^ [2]
   generics.js:8:24
    8| type Message = { type: 's', v: number } | { type: 'p', x: string };
                              ^^^ [3]
   generics.js:8:51
    8| type Message = { type: 's', v: number } | { type: 'p', x: string };
                                                         ^^^ [4]



Found 6 errors
